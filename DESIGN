COMP9243 Distributed System Assignment 2 
written by z5219960 Lin, Heng-Chuan 7/11/2020

Router.erl
spawned node will be running on  
    process(RouterName, Table, Cur_SeqNum, IsIn2PC, MsgQueue, TentativeResult)
        parameters:
            RouterName: Node Name specify by controller, pass-in by router:start().
            Table: ets structure storing routing entries, pass-in by router:start().
            Cur_SeqNum: Current Sequence number of operation,initialized with 0
            IsIn2PC: boolean of status whether it's in 2PC or not,initialized with false.
            MsgQueue: a list of queued message,initialized with [].
            TentativeResult: initialized with {}, 
                will have {return value from ControlFun, Temp Routing Table, previous SeqNum} in 2PC
Helper Function in use:
    - ask_nodes_for_commit([Entries],SeqNum,RouterName)
        parameters:
            Entries: [instance from Routing Table]
            SeqNum: SeqNum from {control,SeqNum} message - attach to the {can_you_commit}
            RouterName: NodeName passed-in by router:start()
        Description:
            Didn't have any special feature.
            Just handling iteration of each entry by sending {can_you_commit} and then receive {i_can_commit}/{i_cannot_commit}
            with 5 second timeout.
            return 
                timeout if timeout
                abort if receive {i_cannot_commit}
                true if receive reply {i_can_commit} from rest of nodes
    - propagate_message([Entries],List, Message, FromPid, RootNodePid)
        parameters:
            Entries: [instance from Routing Table]
            List: will contain PIDs of this node's outgoing edge
            RouterName: NodeName pass-in by router:start()
            FromPid: PID which send you this message
            RootNodePid: PID of RootNode in this 2PC    
        Description:
            this helper function not only helps propagating message along node's outgoing edge but also 
            has special feature for reduce the redundancy of message propagation
            It would at some level avoid 
                (1) if this node has the outgoing edge connected to the node who send you this message 
                (2) propagate to RootNode if RootNode is known 
                (this case won't happen in propagate {control} message since in my implement I didn't modified {control}
                    message, it only happen in {doCommit} and {doAbort} since RootNode is known at that moment)
            
2PC protocol
    Normal Case (just brief semantics, more detail in message section):
        - RootNode 
            1. propagate the received {control} message from controller.
            2. after message propagation, RootNode will ask every node {can_you_commit} except itself for 
                confirmation of first phase in 2PC sequentially.
            3. RootNode will determine whether this SeqNum of control message can be committed or should
                be abort by the replies from rest of nodes and further propagate either {doAbort} or {doCommit}. 
            4. After completion of step 3, RootNode will also follow the result either DoCommit or DoAbort,
                send either {abort} or {committed} to controller and finally complete 2PC.
        - Other node
            1. After receive propagated {control} message through its incoming edges,
                Node will also propagate this {control} message through its incoming edges and
                then operate the ControlFun.
            2. [In 1st phase of 2PC] Nodes will receive the {can_you_commit} request as either
                DestNode or just the Forwarder. Node will reply with its answer either {I_can_commit} or {I_cannot_commit}.
            3. [In 1st phase of 2PC] Nodes will either receive the {I_can_commit} or {I_cannot_commit} request as a Forwarder.       
                Node will forward this based on the Trace in message. Eventually, this message will arrive at RootNode's mailbox
            4. [In 2nd phase of 2PC] Nodes will either receive the {DoAbort} or {DoCommit} from its incoming edges.
                Node will execute as it's been told either abort or commit to next recursion of node process().
    Message in use:
        [control] from spec
        - {control, From, Pid, SeqNum, ControlFun} has 3 derivation 
            1. {control, From, Pid, SeqNum, ControlFun} when SeqNum == 0
                For Initial control message 
                    only configure its routing table and bring it into next recursion of node process().
            2. {control, From, Pid, SeqNum, ControlFun} when Pid == From
                For RootNode - will host the entire 2PC event thoroughly
                    During the above procedure, 
                    if any case of 
                        (1) any other single node reply {I_cannot_commit}  
                        (2) the RootNode doesn't receive the reply from the node which
                            it asked for in 5 seconds i.e. - timeout
                        (3) the return value from Control Function at RootNode's side is abort
                        RootNode will propagate DoAbort command along its outgoing edges.
                    Otherwise, 
                        after receiving {I_can_commit} from every other nodes, RootNode will propagate
                        DoCommit command along its outgoing edges.                
            3. {control, From, Pid, SeqNum, ControlFun} 
                For Rest of Nodes
                    (1) operate the Control Function with a copy of its routing table
                    (2) save the result of {return value from Control Function, tentative routing table, current SeqNum} 
                    (3) bring the state of {Received SeqNum, IsIn2PC} and the result to first phase of 2PC
        [1st phase] my implement
        - {can_you_commit, SeqNum, DestNodeName, DeliverPid, RootNodeName, Trace} has 2 derivation
            parameters:
                DestNodeName: node which the message should be routed to
                DeliverPid: node pid indicating which node send this to recipient
                RootNodeName: name of RootNode
                Trace: a list of PID regard to which nodes send this message
                    e.g. if the sending order is RootNode(from)->yellow->green->red(Dest),
                    then Trace will be [greenPID,yellowPID,RootNodePid] when red(Dest) receives this message.
            1. {can_you_commit, SeqNum,DestNodeName, DeliverPid, RootNodeName, Trace} when DestNodeName == RouterName
                For DestNode
                    (1) In {can_you_commit} message, it will contain a list of PID sorted in 
                        sending order
                    (2) look at its return value from tentative result and compare Cur_SeqNum == SeqNum
                        if it's abort -> send {I_cannot_commit} backward based on Trace
                        if it's not abort -> send {I_can_commit} backward based on Trace
            2. {can_you_commit, SeqNum, DestNodeName, DeliverPid, RootNodeName, Trace}
                For Forwarder
                    (1) lookup its routing table find out which node Pid is responsible for this message
                    (2) forward the message with its own PID in Trace for further backward sending
        - {i_can_commit, RootNodeName, DeliverPid, FromNodeName, Trace}
            parameters:
                RootNodeName: name of RootNode
                DeliverPid: node pid indicating which node send this to recipient
                FromNodeName: name of Node who create this message
                Trace: a list of PID regard to which nodes send this message
                    e.g. if the sending order is RootNode(from)->yellow->green->red(Dest),
                    then Trace will be [greenPID,yellowPID,RootNodePid] when red(Dest) receives this message.
            For Forwarder
                (1) Nodes will look at the sending list extracting the next PID which node should forward to 
                (2) forward this message.
        - {i_cannot_commit, RootNodeName, DeliverPid, FromNodeName, Trace}
            parameters:
                RootNodeName: name of RootNode
                DeliverPid: node pid indicating which node send this to recipient
                FromNodeName: name of Node who create this message
                Trace: a list of PID regard to which nodes send this message
                    e.g. if the sending order is RootNode(from)->yellow->green->red(Dest),
                    then Trace will be [greenPID,yellowPID,RootNodePid] when red(Dest) receives this message.
            For Forwarder
                (1) Nodes will look at the sending list extracting the next PID which node should forward to 
                (2) forward this message.
        [2nd phase] my implement
        - {doCommit, SeqNum, FromPid, RootNodePid} 
            parameters:
                SeqNum: SeqNum based on Control message
                FromPid: node pid indicating which node send this to recipient
                RootNodePid: node pid of RootNode
            For Nodes except RootNode
                (1) propagate this command through Node's outgoing edges on current routing table
                (2) extract the previous SeqNum and tentative routing table from tentative result
                (3) overwritten the current routing table with this tentative table
                (4) de-allocate the tentative routing table since it's no longer useful
                (5) bring the status of {current SeqNum, NotIn2PC} and reconfigured routing table to complete the 2PC
        - {doAbort, SeqNum, FromPid, RootNodePid}
            For Nodes except RootNode
                (1) propagate this command through Node's outgoing edges based on current routing table
                (2) extract the return value ,previous SeqNum and tentative routing table from tentative result
                (3) de-allocate the tentative routing table since it's no longer useful
                (4) if return value is a list, terminate the node processes spawned by this node
                (5) rollback the status of {previous SeqNum, NotIn2PC} and same routing table to complete the 2PC
    Fault tolerance:
        - Only process control/2PC messages with right state 
            Since node might receive propagated messages during/before/after 2PC, it is quite important that only process
            within the right state.
            1. control message
                (1) Cur_SeqNum < Received SeqNum and also IsIn2PC == false
                        This is the Normal case we will usually get when RootNode receive a control message 
                        which received SeqNum is larger than current SeqNum before getting in 2PC.
                    Can solve: 
                        (1) keep receiving the old propagated control  
                        (2) keep receiving the latest duplicate propagated control after in 2PC
                (2) Cur_SeqNum > Received SeqNum and also IsIn2PC == true 
                    Can solve:
                        This is the case that will be elaborated in section of Conflicting control request handling.
                        I will talk about it later.
                (3) Otherwise just consume this control message then get into next recursion with the same state
            2. DoAbort/DoCommit
                Process these command with the Received SeqNum is equal to current SeqNum during 2PC.
                Otherwise just consume this control message then get into next recursion with the same state.
                Can solve:
                    keep receiving propagated doAbort/doCommit
            3. can_you_commit:
                only reply this message when that node is in 2PC
                Can solve :
                    falsely reply control message
            4. I_can/cannot_commit:
                only forward this message when RootNode is not equal RouterName.
                Can solve:
                    Let say node A is RootNode, node B is set to sleep in order to fail the configuration in ControlFun.
                    After rest of Nodes except B is done abort operation, Node B just get into 2PC after operating his ControlFun.
                    Node B will receive previous {can_you_commit} from RootNode A. Then Node B will intuitively reply {i_cannot_commit}.
                    In my implement, they will be a list back tracking the nodePid who send this {can_you_commit}, so node which receive
                    {i_cannot_commit} from Node B will look at [Pid_I_should_send_Backward|Rest]. The worst case is that Node B send this to 
                    Node A through its outgoing edge( the path is RootNode A -> Node B without forwarding). At this moment, Node A will fail
                    at [Pid_I_should_send_Backward|Rest] from []. So this RootNode =/= RouterName is to avoid this kind of issue.
        - Flush with the right time
            Flush mailbox is quite tricky since if it flush its mailbox at wrong time, some important message will lost.
            This scenario will happen if some malicious delay/sleep function in ControlFun.
            I've tried using flush() to clean the propagated messages constantly but enable this will break my intention while
            dealing with Conflicting control request - i.e some control message will be flushed so that RootNode which got {control,2}
            might not be able to catch that {control,1} once it abort {control,2} after 2PC.
            Hence, I use the status check to somehow consume these propagated messages and enter next recursion of node process().
        - Queue all message including{message,dump,stop} During 2PC
                During 2PC, nodes won't be bothered by other messages. So the best way I came up with is queuing these messages during 2PC,
                and then process them once 2PC is finished.
            Can solve:
                Suddenly receive other messages during 2PC.
    Conflicting control request handling
        I've implemented some detection on both RootNode's and Other nodes' side.
        RootNode:
            will send controller {abort} if RootNode
                (1) receive the incoming control msg from controller with IsIn2PC is already set to true
                (2) received SeqNum is Equal to current SeqNum (SeqNum = 0 is an exception)
                    In RootNode side, it won't accept duplicate SeqNum under the assumption that SeqNum is unique. 
        Other Node:
            Other Node cannot really tell which one should be processed when receiving first incoming control msg.
            There is an example 
                A-B-C-D-E-F-G-H
            consider the graph is undirected and linear.
            Let say We send A the first Control message with SeqNum 1 and send H the second Control message with SeqNum 2.
            A will propagate the {control,1} and H will propagate {control,2}.
            for Node G, Node G will process {control,2} and save the tentative result then into 2PC. 
            After that, Node G will further receive {control,1} and follow by {can_you_commit,2}.
            my implement is to let node G reply back {i_can_commit} but will discard the result from {control,2} 
            while receiving {control,1}. At a moment, RootNode H will trigger a timeout since one node discard
            {can_you_commit} from RootNode H, even RootNode H broadcast the {doAbort,2}, no node will care since they've
            already overwritten their current SeqNum and abort the result from {control,2} (this abort happen in 1st phase).
            and after RootNode H complete that 2PC with SeqNum 2, the propagated control msg {control,1} will be received by
            Node G and start processing {control,1}.

            In short, I abort the {control,larger SeqNum} and do the {control,smaller SeqNum}.


Control.erl
graphToNetwork(Graph) -> 
    Data structure in use:
        1. Node_Table - ets structure holding {NodeName,NodePid}
        2. IncomingEdges_Count_Table - ets structure holding {NodeName,Incoming_Edges_Count}
        3. Node_List - list of NodeName sorted in reversed spawned order 
    router:nodeSpawn(Graph, Node_Table, IncomingEdges_Count_Table, Node_List) 
        spawn each node process through iteration of graph 
        we will know the relationship {NodeName,Incoming_Edges_Count,NodePid} and the rootNode (lists:last)
        Then we can iterate the graph again and configure the ControlFun
    initial_network_config(Graph, Node_Table, Incoming_Edges_Count_Table)
        iterate through graph and extract the Edges
        send_initial_control_message(Edges, RouterNodePid, Node_Table, Name_List, NoInEdge)
            this will send  to each node the {control,0,ControlFun} with instruction of 
            inserting the sets of {Dest,RoutePid},{NoInEdge,int}.

extendNetwork(RootPid, SeqNum, From, {NodeName, Edges}) ->
    if Edges is [] will directly return false
    obtain {Routing_List, IncomingEdgeNode_List} by calling 
        get_routing_entries_and_edges_list(Edges,_temp_container_1,_temp_container_2)
    Data structure in use:
        Routing_List: a list of {NodeName,RoutePid} for new spawned node
        IncomingEdgeNode_List: the updated table of {NodeName,NoInEdge} 
    Controller will send control message to RootNode by RootNode's PID 
        The Control will detect the recipient match the node name which is responsible of spawning new node.
            For the node which Name == From:
                1. Spawn new node and then send the control message with SeqNum = 0 and ControlFun that 
                    Configure the recipient's routing Table
                2. This node will get NewSpawnPid as return value after operating ControlFun
                3. add a new entry of {New Spawned Node,NewSpawnPid}
            Other Node:         
                1. ReturnValue of ControlFun will be []
                2. find which pid forward to the From Node           
                3. copy RouterPid and update the new entry with that Pid            

            After updating entries,check if recipient has the incoming edge from the new node           
                if the NodeName existed in IncomingEdgeNode_List -> it needs to update it's $NoInEdges
    After sending control message to RootNode,
        wait until receive either {committed} or {abort} from RootNode            
    Here I didn't setup any timeout checking this. I assumption the RootNode always be there on the duty.